/* tslint:disable */
/* eslint-disable */
/**
 * Terinla
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Book,
  EmailNotification,
} from '../models/index';
import {
    BookFromJSON,
    BookToJSON,
    EmailNotificationFromJSON,
    EmailNotificationToJSON,
} from '../models/index';

export interface BooksBorrowIdUserIdGetRequest {
    id: number;
    userId: number;
}

export interface BooksCategoryCategoryGetRequest {
    category: string;
}

export interface BooksHopOnWaitListIdUserIdGetRequest {
    id: number;
    userId: number;
}

export interface BooksIdGetRequest {
    id: number;
}

export interface BooksReturnIdUserIdGetRequest {
    id: number;
    userId: number;
}

export interface EmailsUserIdGetRequest {
    userId: number;
}

/**
 * 
 */
export class TerinlaApi extends runtime.BaseAPI {

    /**
     */
    async booksBorrowIdUserIdGetRaw(requestParameters: BooksBorrowIdUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling booksBorrowIdUserIdGet().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling booksBorrowIdUserIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/books/borrow/{id}/{userId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async booksBorrowIdUserIdGet(requestParameters: BooksBorrowIdUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.booksBorrowIdUserIdGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async booksCategoryCategoryGetRaw(requestParameters: BooksCategoryCategoryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Book>>> {
        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling booksCategoryCategoryGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/books/category/{category}`.replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BookFromJSON));
    }

    /**
     */
    async booksCategoryCategoryGet(requestParameters: BooksCategoryCategoryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Book>> {
        const response = await this.booksCategoryCategoryGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async booksGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Book>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/books`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BookFromJSON));
    }

    /**
     */
    async booksGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Book>> {
        const response = await this.booksGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async booksHopOnWaitListIdUserIdGetRaw(requestParameters: BooksHopOnWaitListIdUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling booksHopOnWaitListIdUserIdGet().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling booksHopOnWaitListIdUserIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/books/hopOnWaitList/{id}/{userId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async booksHopOnWaitListIdUserIdGet(requestParameters: BooksHopOnWaitListIdUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.booksHopOnWaitListIdUserIdGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async booksIdGetRaw(requestParameters: BooksIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Book>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling booksIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/books/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookFromJSON(jsonValue));
    }

    /**
     */
    async booksIdGet(requestParameters: BooksIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Book> {
        const response = await this.booksIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async booksReturnIdUserIdGetRaw(requestParameters: BooksReturnIdUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling booksReturnIdUserIdGet().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling booksReturnIdUserIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/books/return/{id}/{userId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async booksReturnIdUserIdGet(requestParameters: BooksReturnIdUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.booksReturnIdUserIdGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async emailsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EmailNotification>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/emails`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EmailNotificationFromJSON));
    }

    /**
     */
    async emailsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EmailNotification>> {
        const response = await this.emailsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async emailsUserIdGetRaw(requestParameters: EmailsUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EmailNotification>>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling emailsUserIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/emails/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EmailNotificationFromJSON));
    }

    /**
     */
    async emailsUserIdGet(requestParameters: EmailsUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EmailNotification>> {
        const response = await this.emailsUserIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
